<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project xmlns:con="http://eviware.com/soapui/config" id="333b3b92-bc99-4628-afcb-90672b2992ea" created="2.7.0" activeEnvironment="LocalVirt" name="REST Sample Project" resourceRoot="" updated="3.48.0" encryptionMode="Not encrypted" projectVersion="" compositeProjectFormat="1.3">
  <con:description>Sample Projects bases on a virtualized REST service. Please make sure that port 8084 is available on your local machine or you can update the virtual API under the serviceV tool to reflect an open port on your system. You will also have to update the ports on the tests to reflect
the same ports on the virtual service.</con:description>
  <con:settings>
    <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerUIAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Settings File Password" value=""/>
  <con:entry key="Report Format(s)" value="XML"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Slack Channel(s)" value=""/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Test Suite Tags" value=""/>
  <con:entry key="Select Report Type" value="JUnit-Style report for automation"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Test Suite" value="&lt;all>"/>
  <con:entry key="Run in-process" value="false"/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Open Report" value="true"/>
  <con:entry key="Test Case Tags" value=""/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Test Case" value="&lt;all>"/>
  <con:entry key="Slack Access Token" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Username" value=""/>
  <con:entry key="TestRunner Path" value="C:\Program Files\SmartBear\ReadyAPI-3.47.0\bin"/>
  <con:entry key="Environment" value="DockerVirt"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value="C:\Users\dawid.kaminski\Documents\ReadyAPI Projects\TestGrounds\Report"/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting>
    <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Settings File Password" value=""/>
  <con:entry key="Report Format(s)" value="PDF"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Slack Channel(s)" value=""/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Test Suite Tags" value=""/>
  <con:entry key="Select Report Type" value="Test suite printable report"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Test Suite" value="Sample REST Test Suite"/>
  <con:entry key="Run in-process" value="false"/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Test Case Tags" value=""/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Test Case" value="&lt;all>"/>
  <con:entry key="Slack Access Token" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Username" value=""/>
  <con:entry key="TestRunner Path" value="C:\Program Files\SmartBear\ReadyAPI-3.47.0\bin"/>
  <con:entry key="Environment" value="LocalVirt"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value="C:\Users\dawid.kaminski\Documents\ReadyAPI Projects\TestGrounds\Report"/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting>
    <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.support.ProSecurityTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Settings File Password" value=""/>
  <con:entry key="Report Format(s)" value="PDF,CSV,XML"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value="SecurityTest Report"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Test Suite" value="&lt;all>"/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Security Test" value="Security Test 1"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Test Case" value="&lt;all>"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Username" value=""/>
  <con:entry key="TestRunner Path" value="C:\Program Files\SmartBear\ReadyAPI-3.47.0\bin"/>
  <con:entry key="Environment" value="No Environment"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value="C:\Example\Test Report"/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting>
    <con:setting id="333b3b92-bc99-4628-afcb-90672b2992eafileName">REST-Test</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:requirements/>
  <con:properties/>
  <con:wssContainer>
    <con:crypto>
      <con:id>da4640b5-bfe0-4089-95dd-be5f9ba996dd</con:id>
      <con:source>C:/Users/dawid.kaminski/Downloads/i/truststore.key</con:source>
      <con:password>123bob</con:password>
      <con:type>TRUSTSTORE</con:type>
    </con:crypto>
    <con:outgoing mustUnderstand="false">
      <con:name>Test</con:name>
      <con:username/>
      <con:password>123</con:password>
      <con:usePredefinedOrder>false</con:usePredefinedOrder>
    </con:outgoing>
  </con:wssContainer>
  <con:databaseConnectionContainer/>
  <con:jmsConnectionContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:reporting/>
  <con:beforeRunScript/>
  <con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest">
    <con:script disabled="true">// Sample event script to add custom HTTP header to all outgoing REST, SOAP and HTTP(S) calls
// This code is often used for adding custom authentication to ReadyAPI functional tests

// If hardcoding the token, uncomment and change line 5
// def token = '4567'

// If your token is parameterized in Project level custom property, uncomment line 8
// def token = request.parent.testCase.testSuite.project.getProperty('auth_token').getValue()

// To modify all outgoing calls, remove comments from lines 11 to 16
// def headers = request.requestHeaders
// if (headers.containsKey('auth_token2') == false) {
//   headers.put('auth_token2', token)
//   request.requestHeaders = headers
// }</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep">
    <con:script disabled="true">//log.info"Name"+testStepResult.testStep.getName() + "Step Status: " + testStepResult.getStatus()
log.info testRunner.getStatus()






//def testSuites
//def testCases
//def testSteps
//
//testSuites = projectRunner.getResults()
//testSuites.each() {
//	log.info "->TestSuite '" + it.getTestSuite().getName() + "' status: " + it.getStatus().toString() + "..." + it.getTimeTaken() + " ms"
//	testCases = it.getResults()
//	testCases.each() {
//		log.info "---> TestCase '" + it.getTestCase().getName() + "' status: " + it.getStatus().toString() + "..." + it.getTimeTaken() + " ms"
//		testSteps =it.getResults()
//		testSteps.each() {
//			log.info "------> TestStep '" + it.getTestStep().getName() + "' status: " + it.getStatus().toString() + "..." + it.getTimeTaken() + " ms"
//			}
//	}
//}</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="RequestFilter.afterRequest" name="RequestFilter.afterRequest">
    <con:script disabled="true">byte[] rawRequestData = request.getResponse().getRawRequestData()
request = new String(rawRequestData)

log.info(request.substring(0,request.indexOf("H")))</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="ProjectRunListener.afterRun" name="ProjectRunListener.afterRun">
    <con:script disabled="true">def testSuites
def testCases
def testSteps

testSuites = projectRunner.getResults()
testSuites.each() {
	log.info "->TestSuite '" + it.getTestSuite().getName() + "' status: " + it.getStatus().toString() + "..." + it.getTimeTaken() + " ms"
	testCases = it.getResults()
	testCases.each() {
		log.info "---> TestCase '" + it.getTestCase().getName() + "' status: " + it.getStatus().toString() + "..." + it.getTimeTaken() + " ms"
		testSteps =it.getResults()
		testSteps.each() {
			log.info "------> TestStep '" + it.getTestStep().getName() + "' status: " + it.getStatus().toString() + "..." + it.getTimeTaken() + " ms"
			}
	}
}</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="ProjectRunListener.afterRun" name="ProjectRunListener.afterRun">
    <con:script disabled="true">def testSuites
def testCases
def testSteps

testSuites = projectRunner.getResults()
testSuites.each() {
	log.info "  â””-->TestSuite '" + it.getTestSuite().getName() + "' status: " + it.getStatus().toString() + "..." + it.getTimeTaken() + " ms"
	testCases = it.getResults()
	testCases.each() {
		log.info "  â””----> TestCase '" + it.getTestCase().getName() + "' status: " + it.getStatus().toString() + "..." + it.getTimeTaken() + " ms"
		testSteps =it.getResults()
		testSteps.each() {
			log.info "â””------> TestStep '" + it.getTestStep().getName() + "' status: " + it.getStatus().toString() + "..." + it.getTimeTaken() + " ms"
			}
	}
}</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest">
    <con:script disabled="true">byte[] rawRequestData = request.getResponse().getRawRequestData()
request = new String(rawRequestData)

log.info(request.substring(0,request.indexOf("H")))</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="SubmitListener.beforeSubmit" name="SubmitListener.beforeSubmit">
    <con:script disabled="true">import com.eviware.soapui.impl.rest.support.RestUtils

def rutils = new RestUtils()

def endpoint =  submit.request.getEndpoint() // get Endpoint
def pathTempl = submit.request.getPath() // get Resource template
def path = RestUtils.getExpandedPath(pathTempl,submit.request.getParams(),context.modelItem) // get Resource path with template params expanded
def queryParam = rutils.getQueryParamsString(submit.request) // get Query with parameters

def fullPath = endpoint + path + queryParam
log.info fullPath</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="TestSuiteRunListener.afterTestCase" name="TestSuiteRunListener.afterTestCase">
    <con:script disabled="true">log.info "Name" +testCaseRunner.testCase.getName() + "TestCase Status: " +testCaseRunner.getStatus()</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="ProjectRunListener.afterTestSuite" name="ProjectRunListener.afterTestSuite">
    <con:script disabled="true">log.info "TEST : " + testSuiteRunner.getStatus()</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="ProjectRunListener.afterRun" name="ProjectRunListener.afterRun">
    <con:script disabled="true"/>
  </con:eventHandlers>
  <con:eventHandlers type="TestRunListener.afterRun" name="TestRunListener.afterRun">
    <con:script disabled="true">def tc 
def ts
testRunner.
tc = testRunner.getStatus()
tcn =testRunner.testCase.getName()
clas= testRunner.getClass()
log.info clas

testSteps =testRunner.getResults()
testSteps.each() {
	log.info "------> TestStep '" + it.getTestStep().getName() + "' status: " + it.getStatus().toString() + "..." + it.getTimeTaken() + " ms"
}

//def testSuites
//def testCases
//def testSteps
//
//testSuites = projectRunner.getResults()
//testSuites.each() {
//	log.info "  â””-->TestSuite '" + it.getTestSuite().getName() + "' status: " + it.getStatus().toString() + "..." + it.getTimeTaken() + " ms"
//	testCases = it.getResults()
//	testCases.each() {
//		log.info "  â””----> TestCase '" + it.getTestCase().getName() + "' status: " + it.getStatus().toString() + "..." + it.getTimeTaken() + " ms"
//		testSteps =it.getResults()
//		testSteps.each() {
//			log.info "â””------> TestStep '" + it.getTestStep().getName() + "' status: " + it.getStatus().toString() + "..." + it.getTimeTaken() + " ms"
//			}
//	}
//}</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="SubmitListener.afterSubmit" name="SubmitListener.afterSubmit">
    <con:script disabled="true">import com.eviware.soapui.impl.rest.support.RestUtils

def rutils = new RestUtils()

def endpoint =  submit.request.getEndpoint() // get Endpoint
def pathTempl = submit.request.getPath() // get Resource template
def path = RestUtils.getExpandedPath(pathTempl,submit.request.getParams(),context.modelItem) // get Resource path with template params expanded
def queryParam = rutils.getQueryParamsString(submit.request) // get Query with parameters

def fullPath = endpoint + path + queryParam
log.info fullPath</con:script>
  </con:eventHandlers>
  <con:environment id="81a31274-a4de-4aef-a37f-c003d37bcc6d" name="DockerVirt" index="0">
    <con:service type="REST" name="Ecommerce">
      <con:endpoint authProfile="No Authorization" proxyHost="" proxyPort="" proxyUsername="" proxyPassword="" areGlobalProxySettingsIgnored="false">http://localhost:8081</con:endpoint>
    </con:service>
    <con:databaseConnectionContainer/>
    <con:jmsConnectionContainer/>
  </con:environment>
  <con:environment id="e6ac59e6-e617-4c6b-8b1b-5524c237ac6d" name="LocalVirt" index="1">
    <con:service type="REST" name="Ecommerce">
      <con:endpoint authProfile="No Authorization" proxyHost="" proxyPort="" proxyUsername="" proxyPassword="" areGlobalProxySettingsIgnored="false">http://localhost:8001</con:endpoint>
    </con:service>
    <con:databaseConnectionContainer/>
    <con:jmsConnectionContainer/>
  </con:environment>
  <con:virtServer>
    <con:name>Local Docker VirtServer</con:name>
    <con:url>https://localhost:9090</con:url>
  </con:virtServer>
  <con:authRepository/>
  <con:environmentSpec>
    <con:entry environmentId="81a31274-a4de-4aef-a37f-c003d37bcc6d">
      <con:authProfile>No Authorization</con:authProfile>
    </con:entry>
    <con:entry environmentId="e6ac59e6-e617-4c6b-8b1b-5524c237ac6d">
      <con:authProfile>No Authorization</con:authProfile>
    </con:entry>
  </con:environmentSpec>
  <con:tags/>
</con:soapui-project>
